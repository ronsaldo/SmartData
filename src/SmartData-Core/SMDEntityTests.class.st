Class {
	#name : #SMDEntityTests,
	#superclass : #TestCase,
	#instVars : [
		'dataStore'
	],
	#category : #'SmartData-Core-Tests'
}

{ #category : #running }
SMDEntityTests >> setUp [
	dataStore := SMDTransientDataStore new.
]

{ #category : #tests }
SMDEntityTests >> testEntityFieldSlotInitialization [
	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes new.
		self assert: entity name isNotNil.
		self assert: entity name owner equals: entity.
		self assert: entity value isNotNil.
		self assert: entity value owner equals: entity.
	].
]

{ #category : #tests }
SMDEntityTests >> testEntityFieldSlotNames [
	self assert: SMDTestEntityWithAttributes entityFieldNames asArray equals: #(name value)
]

{ #category : #tests }
SMDEntityTests >> testEntityFieldSlotSerialization [
	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity deserializedEntity serializedFields |
		entity := SMDTestEntityWithAttributes new.
		entity name: 'John Doe'; value: 42.
		serializedFields := entity serializedEntityFields.
		self assert: serializedFields isArray.
		
		deserializedEntity := SMDTestEntityWithAttributes new.
		deserializedEntity deserializeEntityFieldsFrom: (Dictionary newFromPairs: entity serializedEntityFields).
		self assert: deserializedEntity name value equals: 'John Doe'.
		self assert: deserializedEntity value value equals: 42.
	].
]

{ #category : #tests }
SMDEntityTests >> testEntityFieldSlotValueSetting [
	| entity |
	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		entity := SMDTestEntityWithAttributes new.
		self assert: entity name owner equals: entity.
		self assert: entity name value equals: nil.
		entity name: 'John Doe'.
		self assert: entity name value equals: 'John Doe'.
		self assert: entity name owner equals: entity.
	]

]

{ #category : #tests }
SMDEntityTests >> testEntityNewAutoGeneratedID [
	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes new.
		self assert: entity id isNotNil.
	].
]

{ #category : #tests }
SMDEntityTests >> testEntityNewNotInTransactionError [
	self should: [SMDTestEntityWithAttributes new] raise: Error
]

{ #category : #tests }
SMDEntityTests >> testEntityPreviousVersionAccess [
	| id |
	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes new.
		entity name: 'Version'; value: 0.
		self assert: entity previousVersion equals: nil.
		self assert: entity firstVersion equals: entity.
		self assert: entity currentVersion equals: entity.
		
		id := entity id.
		transaction commit.
	].

	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes getWithID: id.
		self assert: entity name value equals: 'Version'. 
		self assert: entity value value equals: 0. 

		self assert: entity previousVersion equals: nil.
		self assert: entity firstVersion equals: entity.
		self assert: entity currentVersion equals: entity.

		entity value: 1.
		transaction commit.
	].

	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes getWithID: id.
		self assert: entity firstVersion name value equals: 'Version'.
		self assert: entity firstVersion value value equals: 0.

		self assert: entity previousVersion equals: entity firstVersion.

		self assert: entity name value equals: 'Version'. 
		self assert: entity value value equals: 1. 
		entity value: 2.
		transaction commit.
	].

	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes getWithID: id.
		self assert: entity firstVersion name value equals: 'Version'.
		self assert: entity firstVersion value value equals: 0.

		self assert: entity previousVersion name value equals: 'Version'.
		self assert: entity previousVersion value value equals: 1.

		self assert: entity name value equals: 'Version'. 
		self assert: entity value value equals: 2.
	].
]

{ #category : #tests }
SMDEntityTests >> testEntitySerialization [
	| originalId serializedEntity |
	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| entity |
		entity := SMDTestEntityWithAttributes new.
		entity name: 'John Doe'; value: 42.
		originalId := entity id.
		serializedEntity := entity serializedEntity.
		self assert: serializedEntity isArray.
	].

	dataStore withRole: SMDSuperUserAdminRole doTransactionWith: [ :transaction |
		| deserializedEntity |
		deserializedEntity := SMDEntity materializeEntityWith: serializedEntity.
		self assert: deserializedEntity id equals: originalId.
		self assert: deserializedEntity name value equals: 'John Doe'.
		self assert: deserializedEntity value value equals: 42.
	].


]
